# Use the official Miniconda image as a base
FROM continuumio/miniconda3

# Set a working directory
WORKDIR /app

# Install wkhtmltopdf
RUN apt-get update && apt-get install -y wkhtmltopdf && rm -rf /var/lib/apt/lists/*

# Copy the Conda environment file into the image
COPY cramino.yml  environment.yml

# Create the Conda environment from the YAML file
RUN conda env create -f environment.yml

# Switch the shell so that subsequent RUN commands run in the new conda environment
SHELL ["conda", "run", "-n", "annotatecnv_env", "/bin/bash", "-c"]

# Install R (>=4) from conda-forge (if not already specified in your environment file)
RUN conda install -y -c conda-forge "r-base>=4"

# Install system dependencies needed for compiling R packages
RUN apt-get update && apt-get install -y \
    libcurl4-openssl-dev \
    libssl-dev \
    libxml2-dev \
    libreadline-dev \
    libcairo2-dev \
    libxt-dev \
    gfortran \
    build-essential \
    libbz2-dev \
    libpcre3-dev \
    liblzma-dev \
    && rm -rf /var/lib/apt/lists/*

# Copy the ggpp tarball into the image (ensure ggpp_0.5.8-1.tar.gz is in your build context)
COPY ggpp_0.5.8-1.tar.gz /tmp/

# Install remotes (if not already installed)
RUN Rscript -e "install.packages('remotes', repos='https://cloud.r-project.org/')"

# Install ggpp (and its dependencies) from the local tarball using remotes
RUN Rscript -e "remotes::install_local('/tmp/ggpp_0.5.8-1.tar.gz')"

# Verify that ggpp is installed
RUN Rscript -e "if (!requireNamespace('ggpp', quietly = TRUE)) stop('ggpp not installed'); library(ggpp)"

# Clean up the ggpp tarball
RUN rm /tmp/ggpp_0.5.8-1.tar.gz

# Install Python 3.10, its development headers, and pip
#RUN apt-get update && apt-get install -y python3.10 python3.10-dev python3-pip && rm -rf /var/lib/apt/lists/*

# Install Python packages using pip
#RUN pip3 install pandas numpy

# Set the default command to bash
CMD ["bash"]

